# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Query {
  """
   Authenticated Item
  """
  authenticatedItem: AuthenticatedItem
  events(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Event!]
  event(where: EventWhereUniqueInput!): Event
  eventsCount(where: EventWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  bookmarks(
    where: BookmarkWhereInput! = {}
    orderBy: [BookmarkOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Bookmark!]
  bookmark(where: BookmarkWhereUniqueInput!): Bookmark
  bookmarksCount(where: BookmarkWhereInput! = {}): Int
  collections(
    where: CollectionWhereInput! = {}
    orderBy: [CollectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Collection!]
  collection(where: CollectionWhereUniqueInput!): Collection
  collectionsCount(where: CollectionWhereInput! = {}): Int
  bylines(
    where: BylineWhereInput! = {}
    orderBy: [BylineOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Byline!]
  byline(where: BylineWhereUniqueInput!): Byline
  bylinesCount(where: BylineWhereInput! = {}): Int
  locations(
    where: LocationWhereInput! = {}
    orderBy: [LocationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Location!]
  location(where: LocationWhereUniqueInput!): Location
  locationsCount(where: LocationWhereInput! = {}): Int
  labels(
    where: LabelWhereInput! = {}
    orderBy: [LabelOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Label!]
  label(where: LabelWhereUniqueInput!): Label
  labelsCount(where: LabelWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  articles(
    where: ArticleWhereInput! = {}
    orderBy: [ArticleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Article!]
  article(where: ArticleWhereUniqueInput!): Article
  articlesCount(where: ArticleWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

union AuthenticatedItem = User

type Event {
  id: ID!
  operation: String
  itemListKey: String
  itemId: String
  inputData: JSON
  resolvedData: JSON
  changedData: JSON
  originalItem: JSON
  item: JSON
  actor: User
  name: String
  updatedAt: DateTime
  createdAt: DateTime
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input EventWhereUniqueInput {
  id: ID
}

input EventWhereInput {
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
  id: IDFilter
  operation: StringFilter
  itemListKey: StringFilter
  itemId: StringFilter
  actor: UserWhereInput
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input EventOrderByInput {
  id: OrderDirection
  operation: OrderDirection
  itemListKey: OrderDirection
  itemId: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input EventUpdateInput {
  operation: String
  itemListKey: String
  itemId: String
  inputData: JSON
  resolvedData: JSON
  changedData: JSON
  originalItem: JSON
  item: JSON
  actor: UserRelateToOneForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input EventUpdateArgs {
  where: EventWhereUniqueInput!
  data: EventUpdateInput!
}

input EventCreateInput {
  operation: String
  itemListKey: String
  itemId: String
  inputData: JSON
  resolvedData: JSON
  changedData: JSON
  originalItem: JSON
  item: JSON
  actor: UserRelateToOneForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type User {
  id: ID!
  userId: String
  name: String
  isAdmin: Boolean
  isEnabled: Boolean
  role: UserRoleType
  syncedAt: DateTime
  updatedBy: User
  createdBy: User
  updatedAt: DateTime
  createdAt: DateTime
}

enum UserRoleType {
  User
  Author
  Manager
}

input UserWhereUniqueInput {
  id: ID
  userId: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  userId: StringFilter
  name: StringFilter
  isAdmin: BooleanFilter
  isEnabled: BooleanFilter
  role: UserRoleTypeNullableFilter
  syncedAt: DateTimeFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserRoleTypeNullableFilter {
  equals: UserRoleType
  in: [UserRoleType!]
  notIn: [UserRoleType!]
  not: UserRoleTypeNullableFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input UserOrderByInput {
  id: OrderDirection
  userId: OrderDirection
  name: OrderDirection
  isAdmin: OrderDirection
  isEnabled: OrderDirection
  role: OrderDirection
  syncedAt: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input UserUpdateInput {
  userId: String
  name: String
  isAdmin: Boolean
  isEnabled: Boolean
  role: UserRoleType
  syncedAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  userId: String
  name: String
  isAdmin: Boolean
  isEnabled: Boolean
  role: UserRoleType
  syncedAt: DateTime
}

type Bookmark {
  id: ID!
  url: String
  label: String
  description: String
  keywords: String
  collections(
    where: CollectionWhereInput! = {}
    orderBy: [CollectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Collection!]
  collectionsCount(where: CollectionWhereInput! = {}): Int
  updatedBy: User
  createdBy: User
  updatedAt: DateTime
  createdAt: DateTime
}

input BookmarkWhereUniqueInput {
  id: ID
}

input BookmarkWhereInput {
  AND: [BookmarkWhereInput!]
  OR: [BookmarkWhereInput!]
  NOT: [BookmarkWhereInput!]
  id: IDFilter
  url: StringFilter
  label: StringFilter
  description: StringFilter
  keywords: StringFilter
  collections: CollectionManyRelationFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
}

input CollectionManyRelationFilter {
  every: CollectionWhereInput
  some: CollectionWhereInput
  none: CollectionWhereInput
}

input BookmarkOrderByInput {
  id: OrderDirection
  url: OrderDirection
  label: OrderDirection
  description: OrderDirection
  keywords: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input BookmarkUpdateInput {
  url: String
  label: String
  description: String
  keywords: String
  collections: CollectionRelateToManyForUpdateInput
}

input CollectionRelateToManyForUpdateInput {
  disconnect: [CollectionWhereUniqueInput!]
  set: [CollectionWhereUniqueInput!]
  create: [CollectionCreateInput!]
  connect: [CollectionWhereUniqueInput!]
}

input BookmarkUpdateArgs {
  where: BookmarkWhereUniqueInput!
  data: BookmarkUpdateInput!
}

input BookmarkCreateInput {
  url: String
  label: String
  description: String
  keywords: String
  collections: CollectionRelateToManyForCreateInput
}

input CollectionRelateToManyForCreateInput {
  create: [CollectionCreateInput!]
  connect: [CollectionWhereUniqueInput!]
}

type Collection {
  id: ID!
  title: String
  bookmarks(
    where: BookmarkWhereInput! = {}
    orderBy: [BookmarkOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Bookmark!]
  bookmarksCount(where: BookmarkWhereInput! = {}): Int
  showInSitesApps: Boolean
  updatedBy: User
  createdBy: User
  updatedAt: DateTime
  createdAt: DateTime
}

input CollectionWhereUniqueInput {
  id: ID
}

input CollectionWhereInput {
  AND: [CollectionWhereInput!]
  OR: [CollectionWhereInput!]
  NOT: [CollectionWhereInput!]
  id: IDFilter
  title: StringFilter
  bookmarks: BookmarkManyRelationFilter
  showInSitesApps: BooleanFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
}

input BookmarkManyRelationFilter {
  every: BookmarkWhereInput
  some: BookmarkWhereInput
  none: BookmarkWhereInput
}

input CollectionOrderByInput {
  id: OrderDirection
  title: OrderDirection
  showInSitesApps: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input CollectionUpdateInput {
  title: String
  bookmarks: BookmarkRelateToManyForUpdateInput
  showInSitesApps: Boolean
}

input BookmarkRelateToManyForUpdateInput {
  disconnect: [BookmarkWhereUniqueInput!]
  set: [BookmarkWhereUniqueInput!]
  create: [BookmarkCreateInput!]
  connect: [BookmarkWhereUniqueInput!]
}

input CollectionUpdateArgs {
  where: CollectionWhereUniqueInput!
  data: CollectionUpdateInput!
}

input CollectionCreateInput {
  title: String
  bookmarks: BookmarkRelateToManyForCreateInput
  showInSitesApps: Boolean
}

input BookmarkRelateToManyForCreateInput {
  create: [BookmarkCreateInput!]
  connect: [BookmarkWhereUniqueInput!]
}

type Byline {
  id: ID!
  name: String
  updatedBy: User
  createdBy: User
  updatedAt: DateTime
  createdAt: DateTime
}

input BylineWhereUniqueInput {
  id: ID
  name: String
}

input BylineWhereInput {
  AND: [BylineWhereInput!]
  OR: [BylineWhereInput!]
  NOT: [BylineWhereInput!]
  id: IDFilter
  name: StringFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
}

input BylineOrderByInput {
  id: OrderDirection
  name: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input BylineUpdateInput {
  name: String
}

input BylineUpdateArgs {
  where: BylineWhereUniqueInput!
  data: BylineUpdateInput!
}

input BylineCreateInput {
  name: String
}

type Location {
  id: ID!
  name: String
  updatedBy: User
  createdBy: User
  updatedAt: DateTime
  createdAt: DateTime
}

input LocationWhereUniqueInput {
  id: ID
  name: String
}

input LocationWhereInput {
  AND: [LocationWhereInput!]
  OR: [LocationWhereInput!]
  NOT: [LocationWhereInput!]
  id: IDFilter
  name: StringFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
}

input LocationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input LocationUpdateInput {
  name: String
}

input LocationUpdateArgs {
  where: LocationWhereUniqueInput!
  data: LocationUpdateInput!
}

input LocationCreateInput {
  name: String
}

type Label {
  id: ID!
  name: String
  updatedBy: User
  createdBy: User
  updatedAt: DateTime
  createdAt: DateTime
}

input LabelWhereUniqueInput {
  id: ID
  name: String
}

input LabelWhereInput {
  AND: [LabelWhereInput!]
  OR: [LabelWhereInput!]
  NOT: [LabelWhereInput!]
  id: IDFilter
  name: StringFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
}

input LabelOrderByInput {
  id: OrderDirection
  name: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input LabelUpdateInput {
  name: String
}

input LabelUpdateArgs {
  where: LabelWhereUniqueInput!
  data: LabelUpdateInput!
}

input LabelCreateInput {
  name: String
}

type Tag {
  id: ID!
  name: String
  updatedBy: User
  createdBy: User
  updatedAt: DateTime
  createdAt: DateTime
}

input TagWhereUniqueInput {
  id: ID
  name: String
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input TagUpdateInput {
  name: String
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
}

type Article {
  id: ID!
  status: ArticleStatusType
  slug: String
  title: String
  preview: String
  body: Article_body_Document
  keywords: String
  publishedDate: DateTime
  archivedDate: DateTime
  byline: Byline
  label(
    where: LabelWhereInput! = {}
    orderBy: [LabelOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Label!]
  labelCount(where: LabelWhereInput! = {}): Int
  location: Location
  tag(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagCount(where: TagWhereInput! = {}): Int
  updatedBy: User
  createdBy: User
  updatedAt: DateTime
  createdAt: DateTime
}

enum ArticleStatusType {
  Draft
  Published
  Archived
}

type Article_body_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ArticleWhereUniqueInput {
  id: ID
  slug: String
}

input ArticleWhereInput {
  AND: [ArticleWhereInput!]
  OR: [ArticleWhereInput!]
  NOT: [ArticleWhereInput!]
  id: IDFilter
  status: ArticleStatusTypeNullableFilter
  slug: StringFilter
  title: StringFilter
  preview: StringFilter
  keywords: StringFilter
  publishedDate: DateTimeNullableFilter
  archivedDate: DateTimeNullableFilter
  byline: BylineWhereInput
  label: LabelManyRelationFilter
  location: LocationWhereInput
  tag: TagManyRelationFilter
  updatedBy: UserWhereInput
  createdBy: UserWhereInput
  updatedAt: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
}

input ArticleStatusTypeNullableFilter {
  equals: ArticleStatusType
  in: [ArticleStatusType!]
  notIn: [ArticleStatusType!]
  not: ArticleStatusTypeNullableFilter
}

input LabelManyRelationFilter {
  every: LabelWhereInput
  some: LabelWhereInput
  none: LabelWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input ArticleOrderByInput {
  id: OrderDirection
  status: OrderDirection
  slug: OrderDirection
  title: OrderDirection
  preview: OrderDirection
  keywords: OrderDirection
  publishedDate: OrderDirection
  archivedDate: OrderDirection
  updatedAt: OrderDirection
  createdAt: OrderDirection
}

input ArticleUpdateInput {
  status: ArticleStatusType
  slug: String
  title: String
  preview: String
  body: JSON
  keywords: String
  publishedDate: DateTime
  archivedDate: DateTime
  byline: BylineRelateToOneForUpdateInput
  label: LabelRelateToManyForUpdateInput
  location: LocationRelateToOneForUpdateInput
  tag: TagRelateToManyForUpdateInput
}

input BylineRelateToOneForUpdateInput {
  create: BylineCreateInput
  connect: BylineWhereUniqueInput
  disconnect: Boolean
}

input LabelRelateToManyForUpdateInput {
  disconnect: [LabelWhereUniqueInput!]
  set: [LabelWhereUniqueInput!]
  create: [LabelCreateInput!]
  connect: [LabelWhereUniqueInput!]
}

input LocationRelateToOneForUpdateInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input ArticleUpdateArgs {
  where: ArticleWhereUniqueInput!
  data: ArticleUpdateInput!
}

input ArticleCreateInput {
  status: ArticleStatusType
  slug: String
  title: String
  preview: String
  body: JSON
  keywords: String
  publishedDate: DateTime
  archivedDate: DateTime
  byline: BylineRelateToOneForCreateInput
  label: LabelRelateToManyForCreateInput
  location: LocationRelateToOneForCreateInput
  tag: TagRelateToManyForCreateInput
}

input BylineRelateToOneForCreateInput {
  create: BylineCreateInput
  connect: BylineWhereUniqueInput
}

input LabelRelateToManyForCreateInput {
  create: [LabelCreateInput!]
  connect: [LabelWhereUniqueInput!]
}

input LocationRelateToOneForCreateInput {
  create: LocationCreateInput
  connect: LocationWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createEvent(data: EventCreateInput!): Event
  createEvents(data: [EventCreateInput!]!): [Event]
  updateEvent(where: EventWhereUniqueInput!, data: EventUpdateInput!): Event
  updateEvents(data: [EventUpdateArgs!]!): [Event]
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteEvents(where: [EventWhereUniqueInput!]!): [Event]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createBookmark(data: BookmarkCreateInput!): Bookmark
  createBookmarks(data: [BookmarkCreateInput!]!): [Bookmark]
  updateBookmark(
    where: BookmarkWhereUniqueInput!
    data: BookmarkUpdateInput!
  ): Bookmark
  updateBookmarks(data: [BookmarkUpdateArgs!]!): [Bookmark]
  deleteBookmark(where: BookmarkWhereUniqueInput!): Bookmark
  deleteBookmarks(where: [BookmarkWhereUniqueInput!]!): [Bookmark]
  createCollection(data: CollectionCreateInput!): Collection
  createCollections(data: [CollectionCreateInput!]!): [Collection]
  updateCollection(
    where: CollectionWhereUniqueInput!
    data: CollectionUpdateInput!
  ): Collection
  updateCollections(data: [CollectionUpdateArgs!]!): [Collection]
  deleteCollection(where: CollectionWhereUniqueInput!): Collection
  deleteCollections(where: [CollectionWhereUniqueInput!]!): [Collection]
  createByline(data: BylineCreateInput!): Byline
  createBylines(data: [BylineCreateInput!]!): [Byline]
  updateByline(where: BylineWhereUniqueInput!, data: BylineUpdateInput!): Byline
  updateBylines(data: [BylineUpdateArgs!]!): [Byline]
  deleteByline(where: BylineWhereUniqueInput!): Byline
  deleteBylines(where: [BylineWhereUniqueInput!]!): [Byline]
  createLocation(data: LocationCreateInput!): Location
  createLocations(data: [LocationCreateInput!]!): [Location]
  updateLocation(
    where: LocationWhereUniqueInput!
    data: LocationUpdateInput!
  ): Location
  updateLocations(data: [LocationUpdateArgs!]!): [Location]
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deleteLocations(where: [LocationWhereUniqueInput!]!): [Location]
  createLabel(data: LabelCreateInput!): Label
  createLabels(data: [LabelCreateInput!]!): [Label]
  updateLabel(where: LabelWhereUniqueInput!, data: LabelUpdateInput!): Label
  updateLabels(data: [LabelUpdateArgs!]!): [Label]
  deleteLabel(where: LabelWhereUniqueInput!): Label
  deleteLabels(where: [LabelWhereUniqueInput!]!): [Label]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createArticle(data: ArticleCreateInput!): Article
  createArticles(data: [ArticleCreateInput!]!): [Article]
  updateArticle(
    where: ArticleWhereUniqueInput!
    data: ArticleUpdateInput!
  ): Article
  updateArticles(data: [ArticleUpdateArgs!]!): [Article]
  deleteArticle(where: ArticleWhereUniqueInput!): Article
  deleteArticles(where: [ArticleWhereUniqueInput!]!): [Article]
  endSession: Boolean!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}

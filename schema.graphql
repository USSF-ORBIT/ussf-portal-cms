# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Query {
  """
   Authenticated Item
  """
  authenticatedItem: AuthenticatedItem
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  bookmarks(
    where: BookmarkWhereInput! = {}
    orderBy: [BookmarkOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Bookmark!]
  bookmark(where: BookmarkWhereUniqueInput!): Bookmark
  bookmarksCount(where: BookmarkWhereInput! = {}): Int
  collections(
    where: CollectionWhereInput! = {}
    orderBy: [CollectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Collection!]
  collection(where: CollectionWhereUniqueInput!): Collection
  collectionsCount(where: CollectionWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

union AuthenticatedItem = User

type User {
  id: ID!
  userId: String
  name: String
  isAdmin: Boolean
  isEnabled: Boolean
  syncedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  userId: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  userId: StringFilter
  name: StringFilter
  isAdmin: BooleanFilter
  isEnabled: BooleanFilter
  syncedAt: DateTimeFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input UserOrderByInput {
  id: OrderDirection
  userId: OrderDirection
  name: OrderDirection
  isAdmin: OrderDirection
  isEnabled: OrderDirection
  syncedAt: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  userId: String
  name: String
  isAdmin: Boolean
  isEnabled: Boolean
  syncedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  userId: String
  name: String
  isAdmin: Boolean
  isEnabled: Boolean
  syncedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

type Bookmark {
  id: ID!
  url: String
  label: String
  description: String
  keywords: String
  collections(
    where: CollectionWhereInput! = {}
    orderBy: [CollectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Collection!]
  collectionsCount(where: CollectionWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input BookmarkWhereUniqueInput {
  id: ID
}

input BookmarkWhereInput {
  AND: [BookmarkWhereInput!]
  OR: [BookmarkWhereInput!]
  NOT: [BookmarkWhereInput!]
  id: IDFilter
  url: StringFilter
  label: StringFilter
  description: StringFilter
  keywords: StringFilter
  collections: CollectionManyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input CollectionManyRelationFilter {
  every: CollectionWhereInput
  some: CollectionWhereInput
  none: CollectionWhereInput
}

input BookmarkOrderByInput {
  id: OrderDirection
  url: OrderDirection
  label: OrderDirection
  description: OrderDirection
  keywords: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input BookmarkUpdateInput {
  url: String
  label: String
  description: String
  keywords: String
  collections: CollectionRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CollectionRelateToManyForUpdateInput {
  disconnect: [CollectionWhereUniqueInput!]
  set: [CollectionWhereUniqueInput!]
  create: [CollectionCreateInput!]
  connect: [CollectionWhereUniqueInput!]
}

input BookmarkUpdateArgs {
  where: BookmarkWhereUniqueInput!
  data: BookmarkUpdateInput!
}

input BookmarkCreateInput {
  url: String
  label: String
  description: String
  keywords: String
  collections: CollectionRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CollectionRelateToManyForCreateInput {
  create: [CollectionCreateInput!]
  connect: [CollectionWhereUniqueInput!]
}

type Collection {
  id: ID!
  title: String
  bookmarks(
    where: BookmarkWhereInput! = {}
    orderBy: [BookmarkOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Bookmark!]
  bookmarksCount(where: BookmarkWhereInput! = {}): Int
  showInSitesApps: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input CollectionWhereUniqueInput {
  id: ID
}

input CollectionWhereInput {
  AND: [CollectionWhereInput!]
  OR: [CollectionWhereInput!]
  NOT: [CollectionWhereInput!]
  id: IDFilter
  title: StringFilter
  bookmarks: BookmarkManyRelationFilter
  showInSitesApps: BooleanFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input BookmarkManyRelationFilter {
  every: BookmarkWhereInput
  some: BookmarkWhereInput
  none: BookmarkWhereInput
}

input CollectionOrderByInput {
  id: OrderDirection
  title: OrderDirection
  showInSitesApps: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CollectionUpdateInput {
  title: String
  bookmarks: BookmarkRelateToManyForUpdateInput
  showInSitesApps: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input BookmarkRelateToManyForUpdateInput {
  disconnect: [BookmarkWhereUniqueInput!]
  set: [BookmarkWhereUniqueInput!]
  create: [BookmarkCreateInput!]
  connect: [BookmarkWhereUniqueInput!]
}

input CollectionUpdateArgs {
  where: CollectionWhereUniqueInput!
  data: CollectionUpdateInput!
}

input CollectionCreateInput {
  title: String
  bookmarks: BookmarkRelateToManyForCreateInput
  showInSitesApps: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input BookmarkRelateToManyForCreateInput {
  create: [BookmarkCreateInput!]
  connect: [BookmarkWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createBookmark(data: BookmarkCreateInput!): Bookmark
  createBookmarks(data: [BookmarkCreateInput!]!): [Bookmark]
  updateBookmark(
    where: BookmarkWhereUniqueInput!
    data: BookmarkUpdateInput!
  ): Bookmark
  updateBookmarks(data: [BookmarkUpdateArgs!]!): [Bookmark]
  deleteBookmark(where: BookmarkWhereUniqueInput!): Bookmark
  deleteBookmarks(where: [BookmarkWhereUniqueInput!]!): [Bookmark]
  createCollection(data: CollectionCreateInput!): Collection
  createCollections(data: [CollectionCreateInput!]!): [Collection]
  updateCollection(
    where: CollectionWhereUniqueInput!
    data: CollectionUpdateInput!
  ): Collection
  updateCollections(data: [CollectionUpdateArgs!]!): [Collection]
  deleteCollection(where: CollectionWhereUniqueInput!): Collection
  deleteCollections(where: [CollectionWhereUniqueInput!]!): [Collection]
  endSession: Boolean!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}

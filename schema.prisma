// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider        = "prisma-client-js"
  output          = "node_modules/.prisma/client"
  previewFeatures = ["fullTextSearch"]
}

model Event {
  id           String    @id @default(cuid())
  operation    String    @default("")
  itemListKey  String    @default("")
  itemId       String    @default("")
  inputData    Json?
  resolvedData Json?
  changedData  Json?
  originalItem Json?
  item         Json?
  actor        User?     @relation("Event_actor", fields: [actorId], references: [id])
  actorId      String?   @map("actor")
  updatedAt    DateTime? @updatedAt
  createdAt    DateTime? @default(now())

  @@index([actorId])
}

model User {
  id                             String            @id @default(cuid())
  userId                         String            @unique @default("")
  name                           String            @default("")
  isAdmin                        Boolean           @default(false)
  isEnabled                      Boolean           @default(false)
  role                           UserRoleType      @default(User)
  syncedAt                       DateTime          @default(now())
  updatedBy                      User?             @relation("User_updatedBy", fields: [updatedById], references: [id])
  updatedById                    String?           @map("updatedBy")
  createdBy                      User?             @relation("User_createdBy", fields: [createdById], references: [id])
  createdById                    String?           @map("createdBy")
  updatedAt                      DateTime?         @updatedAt
  createdAt                      DateTime?         @default(now())
  from_Event_actor               Event[]           @relation("Event_actor")
  from_User_updatedBy            User[]            @relation("User_updatedBy")
  from_User_createdBy            User[]            @relation("User_createdBy")
  from_Bookmark_updatedBy        Bookmark[]        @relation("Bookmark_updatedBy")
  from_Bookmark_createdBy        Bookmark[]        @relation("Bookmark_createdBy")
  from_Collection_updatedBy      Collection[]      @relation("Collection_updatedBy")
  from_Collection_createdBy      Collection[]      @relation("Collection_createdBy")
  from_Byline_updatedBy          Byline[]          @relation("Byline_updatedBy")
  from_Byline_createdBy          Byline[]          @relation("Byline_createdBy")
  from_Location_updatedBy        Location[]        @relation("Location_updatedBy")
  from_Location_createdBy        Location[]        @relation("Location_createdBy")
  from_Label_updatedBy           Label[]           @relation("Label_updatedBy")
  from_Label_createdBy           Label[]           @relation("Label_createdBy")
  from_Tag_updatedBy             Tag[]             @relation("Tag_updatedBy")
  from_Tag_createdBy             Tag[]             @relation("Tag_createdBy")
  from_Article_updatedBy         Article[]         @relation("Article_updatedBy")
  from_Article_createdBy         Article[]         @relation("Article_createdBy")
  from_Announcement_updatedBy    Announcement[]    @relation("Announcement_updatedBy")
  from_Announcement_createdBy    Announcement[]    @relation("Announcement_createdBy")
  from_Document_updatedBy        Document[]        @relation("Document_updatedBy")
  from_Document_createdBy        Document[]        @relation("Document_createdBy")
  from_DocumentsPage_updatedBy   DocumentsPage[]   @relation("DocumentsPage_updatedBy")
  from_DocumentsPage_createdBy   DocumentsPage[]   @relation("DocumentsPage_createdBy")
  from_DocumentSection_updatedBy DocumentSection[] @relation("DocumentSection_updatedBy")
  from_DocumentSection_createdBy DocumentSection[] @relation("DocumentSection_createdBy")

  @@index([updatedById])
  @@index([createdById])
}

model Bookmark {
  id          String       @id @default(cuid())
  url         String       @default("")
  label       String       @default("")
  description String       @default("")
  keywords    String       @default("")
  collections Collection[] @relation("Bookmark_collections")
  updatedBy   User?        @relation("Bookmark_updatedBy", fields: [updatedById], references: [id])
  updatedById String?      @map("updatedBy")
  createdBy   User?        @relation("Bookmark_createdBy", fields: [createdById], references: [id])
  createdById String?      @map("createdBy")
  updatedAt   DateTime?    @updatedAt
  createdAt   DateTime?    @default(now())

  @@index([updatedById])
  @@index([createdById])
}

model Collection {
  id              String     @id @default(cuid())
  title           String     @default("")
  bookmarks       Bookmark[] @relation("Bookmark_collections")
  showInSitesApps Boolean    @default(false)
  updatedBy       User?      @relation("Collection_updatedBy", fields: [updatedById], references: [id])
  updatedById     String?    @map("updatedBy")
  createdBy       User?      @relation("Collection_createdBy", fields: [createdById], references: [id])
  createdById     String?    @map("createdBy")
  updatedAt       DateTime?  @updatedAt
  createdAt       DateTime?  @default(now())

  @@index([updatedById])
  @@index([createdById])
}

model Byline {
  id                  String    @id @default(cuid())
  name                String    @unique @default("")
  updatedBy           User?     @relation("Byline_updatedBy", fields: [updatedById], references: [id])
  updatedById         String?   @map("updatedBy")
  createdBy           User?     @relation("Byline_createdBy", fields: [createdById], references: [id])
  createdById         String?   @map("createdBy")
  updatedAt           DateTime? @updatedAt
  createdAt           DateTime? @default(now())
  from_Article_byline Article[] @relation("Article_byline")

  @@index([updatedById])
  @@index([createdById])
}

model Location {
  id                    String    @id @default(cuid())
  name                  String    @unique @default("")
  updatedBy             User?     @relation("Location_updatedBy", fields: [updatedById], references: [id])
  updatedById           String?   @map("updatedBy")
  createdBy             User?     @relation("Location_createdBy", fields: [createdById], references: [id])
  createdById           String?   @map("createdBy")
  updatedAt             DateTime? @updatedAt
  createdAt             DateTime? @default(now())
  from_Article_location Article[] @relation("Article_location")

  @@index([updatedById])
  @@index([createdById])
}

model Label {
  id                  String        @id @default(cuid())
  name                String        @unique @default("")
  type                LabelTypeType
  updatedBy           User?         @relation("Label_updatedBy", fields: [updatedById], references: [id])
  updatedById         String?       @map("updatedBy")
  createdBy           User?         @relation("Label_createdBy", fields: [createdById], references: [id])
  createdById         String?       @map("createdBy")
  updatedAt           DateTime?     @updatedAt
  createdAt           DateTime?     @default(now())
  from_Article_labels Article[]     @relation("Article_labels")

  @@index([updatedById])
  @@index([createdById])
}

model Tag {
  id                String    @id @default(cuid())
  name              String    @unique @default("")
  updatedBy         User?     @relation("Tag_updatedBy", fields: [updatedById], references: [id])
  updatedById       String?   @map("updatedBy")
  createdBy         User?     @relation("Tag_createdBy", fields: [createdById], references: [id])
  createdById       String?   @map("createdBy")
  updatedAt         DateTime? @updatedAt
  createdAt         DateTime? @default(now())
  from_Article_tags Article[] @relation("Article_tags")

  @@index([updatedById])
  @@index([createdById])
}

model Article {
  id             String              @id @default(cuid())
  category       ArticleCategoryType
  status         ArticleStatusType   @default(Draft)
  slug           String              @unique @default("")
  title          String              @default("")
  preview        String              @default("")
  hero_filesize  Int?
  hero_extension String?
  hero_width     Int?
  hero_height    Int?
  hero_id        String?
  body           Json                @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  searchBody     String              @default("")
  keywords       String              @default("")
  publishedDate  DateTime?
  archivedDate   DateTime?
  byline         Byline?             @relation("Article_byline", fields: [bylineId], references: [id])
  bylineId       String?             @map("byline")
  location       Location?           @relation("Article_location", fields: [locationId], references: [id])
  locationId     String?             @map("location")
  labels         Label[]             @relation("Article_labels")
  tags           Tag[]               @relation("Article_tags")
  updatedBy      User?               @relation("Article_updatedBy", fields: [updatedById], references: [id])
  updatedById    String?             @map("updatedBy")
  createdBy      User?               @relation("Article_createdBy", fields: [createdById], references: [id])
  createdById    String?             @map("createdBy")
  updatedAt      DateTime?           @updatedAt
  createdAt      DateTime?           @default(now())

  @@index([bylineId])
  @@index([locationId])
  @@index([updatedById])
  @@index([createdById])
}

model Announcement {
  id            String                 @id @default(cuid())
  title         String                 @default("")
  body          Json                   @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  status        AnnouncementStatusType @default(Draft)
  publishedDate DateTime?
  archivedDate  DateTime?
  updatedBy     User?                  @relation("Announcement_updatedBy", fields: [updatedById], references: [id])
  updatedById   String?                @map("updatedBy")
  createdBy     User?                  @relation("Announcement_createdBy", fields: [createdById], references: [id])
  createdById   String?                @map("createdBy")
  updatedAt     DateTime?              @updatedAt
  createdAt     DateTime?              @default(now())

  @@index([updatedById])
  @@index([createdById])
}

model Document {
  id                            String            @id @default(cuid())
  file_filesize                 Int?
  file_filename                 String?
  title                         String            @default("")
  description                   String            @default("")
  updatedBy                     User?             @relation("Document_updatedBy", fields: [updatedById], references: [id])
  updatedById                   String?           @map("updatedBy")
  createdBy                     User?             @relation("Document_createdBy", fields: [createdById], references: [id])
  createdById                   String?           @map("createdBy")
  updatedAt                     DateTime?         @updatedAt
  createdAt                     DateTime?         @default(now())
  from_DocumentSection_document DocumentSection[] @relation("DocumentSection_document")

  @@index([updatedById])
  @@index([createdById])
}

model DocumentsPage {
  id          String            @id @default(cuid())
  pageTitle   String            @default("")
  sections    DocumentSection[] @relation("DocumentsPage_sections")
  updatedBy   User?             @relation("DocumentsPage_updatedBy", fields: [updatedById], references: [id])
  updatedById String?           @map("updatedBy")
  createdBy   User?             @relation("DocumentsPage_createdBy", fields: [createdById], references: [id])
  createdById String?           @map("createdBy")
  updatedAt   DateTime?         @updatedAt
  createdAt   DateTime?         @default(now())

  @@index([updatedById])
  @@index([createdById])
}

model DocumentSection {
  id                          String          @id @default(cuid())
  title                       String          @default("")
  document                    Document[]      @relation("DocumentSection_document")
  updatedBy                   User?           @relation("DocumentSection_updatedBy", fields: [updatedById], references: [id])
  updatedById                 String?         @map("updatedBy")
  createdBy                   User?           @relation("DocumentSection_createdBy", fields: [createdById], references: [id])
  createdById                 String?         @map("createdBy")
  updatedAt                   DateTime?       @updatedAt
  createdAt                   DateTime?       @default(now())
  from_DocumentsPage_sections DocumentsPage[] @relation("DocumentsPage_sections")

  @@index([updatedById])
  @@index([createdById])
}

enum UserRoleType {
  User
  Author
  Manager
}

enum LabelTypeType {
  Source
  Audience
  Base
}

enum ArticleCategoryType {
  InternalNews
  ORBITBlog
}

enum ArticleStatusType {
  Draft
  Published
  Archived
}

enum AnnouncementStatusType {
  Draft
  Published
  Archived
}
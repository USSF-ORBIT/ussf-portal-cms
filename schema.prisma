// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                        String       @id @default(cuid())
  userId                    String       @unique @default("")
  name                      String       @default("")
  isAdmin                   Boolean      @default(false)
  isEnabled                 Boolean      @default(false)
  syncedAt                  DateTime     @default(now())
  updatedBy                 User?        @relation("User_updatedBy", fields: [updatedById], references: [id])
  updatedById               String?      @map("updatedBy")
  createdBy                 User?        @relation("User_createdBy", fields: [createdById], references: [id])
  createdById               String?      @map("createdBy")
  updatedAt                 DateTime?    @updatedAt
  createdAt                 DateTime?    @default(now())
  from_User_updatedBy       User[]       @relation("User_updatedBy")
  from_User_createdBy       User[]       @relation("User_createdBy")
  from_Bookmark_updatedBy   Bookmark[]   @relation("Bookmark_updatedBy")
  from_Bookmark_createdBy   Bookmark[]   @relation("Bookmark_createdBy")
  from_Collection_updatedBy Collection[] @relation("Collection_updatedBy")
  from_Collection_createdBy Collection[] @relation("Collection_createdBy")

  @@index([updatedById])
  @@index([createdById])
}

model Bookmark {
  id          String       @id @default(cuid())
  url         String       @default("")
  label       String       @default("")
  description String       @default("")
  keywords    String       @default("")
  collections Collection[] @relation("Bookmark_collections")
  updatedBy   User?        @relation("Bookmark_updatedBy", fields: [updatedById], references: [id])
  updatedById String?      @map("updatedBy")
  createdBy   User?        @relation("Bookmark_createdBy", fields: [createdById], references: [id])
  createdById String?      @map("createdBy")
  updatedAt   DateTime?    @updatedAt
  createdAt   DateTime?    @default(now())

  @@index([updatedById])
  @@index([createdById])
}

model Collection {
  id              String     @id @default(cuid())
  title           String     @default("")
  bookmarks       Bookmark[] @relation("Bookmark_collections")
  showInSitesApps Boolean    @default(false)
  updatedBy       User?      @relation("Collection_updatedBy", fields: [updatedById], references: [id])
  updatedById     String?    @map("updatedBy")
  createdBy       User?      @relation("Collection_createdBy", fields: [createdById], references: [id])
  createdById     String?    @map("createdBy")
  updatedAt       DateTime?  @updatedAt
  createdAt       DateTime?  @default(now())

  @@index([updatedById])
  @@index([createdById])
}